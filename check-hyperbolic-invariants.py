### Copy this file into Sage and run to use SnapPy to compare hyperbolic volumes on +1/-1 and +2/-2 surgeries for the
### 337 knots up to 16 crossings which were not ruled out by running check-cosmetic-surgery-conjecture
### will display any surgery pairs with equal hyperbolic volumes (actually, we display any surgery pairs where the
### volumes differ by less than .001, to avoid rounding issues... the estimated accuracy of the volumes is about
### 10 decimal places). There are 8 such examples (boths pairs of slopes on 4 different knots). For each of these the
### Chern-Simons invariant is evaluated, which distinguishes each pair.

### Note: these are not verified computations. Using SnapPy in Sage, it would be possible to verify these hyperbolic
### volume computations, but the same is not true for the Chern-Simons computations.

import snappy

to_check = ['9_41', '9_44', '10_33', '10_136', '10_146', '11a333', '11n18', '11n42', '11n62', '11n83', '12a1144',
            '12n34', '12n65', '12n278', '12n313', '12n360', '12n393', '12n430', '12n483', '12n550', '12n650', '12n846',
            '12n884', '13n71', '13n198', '13n490', '13n1019', '13n1209', '13n1398', '13n1513', '13n1598', '13n1756',
            '13n1757', '13n2337', '13n2703', '13n2796', '13n3290', '13n3416', '13n3783', '13n4591', '14a17464',
            '14n372', '14n971', '14n1193', '14n2087', '14n2489', '14n6421', '14n7228', '14n7412', '14n7469', '14n7534',
            '14n8091', '14n8196', '14n8554', '14n8716', '14n9290', '14n9684', '14n9829', '14n10155', '14n11129',
            '14n11429', '14n12224', '14n12609', '14n12977', '14n13570', '14n14799', '14n15285', '14n15380', '14n15581',
            '14n15965', '14n15976', '14n17163', '14n17183', '14n18494', '14n19673', '14n21231', '14n21269', '14n22150',
            '14n22196', '14n22614', '14n22634', '14n23325', '14n24593', '14n27072', '14n27091', '15a76589', '15a84220',
            '15n1058', '15n3240', '15n4898', '15n9477', '15n11491', '15n19192', '15n21666', '15n21997', '15n27824',
            '15n30711', '15n34041', '15n34773', '15n36113', '15n38567', '15n38594', '15n41604', '15n43982', '15n46350',
            '15n46536', '15n49081', '15n51379', '15n51847', '15n54458', '15n58840', '15n62260', '15n63468', '15n63550',
            '15n64468', '15n67694', '15n67879', '15n71170', '15n73390', '15n73507', '15n76978', '15n77245', '15n77247',
            '15n77784', '15n83761', '15n84434', '15n84645', '15n88899', '15n91448', '15n93899', '15n94474', '15n96914',
            '15n97157', '15n102309', '15n104775', '15n105829', '15n106611', '15n118711', '15n120250', '15n124511',
            '15n129229', '15n129231', '15n132539', '15n135706', '15n137623', '15n140373', '15n140582', '15n142082',
            '15n142299', '15n142716', '15n142841', '15n142843', '15n143482', '15n143825', '15n143856', '15n144436',
            '15n144439', '15n144887', '15n147186', '15n156806', '15n160027', '16a345268', '16a345454', '16a374264',
            '16n5596', '16n9193', '16n16004', '16n24365', '16n27992','16n49009', '16n60136', '16n67523', '16n94939',
            '16n102539', '16n102773', '16n191694', '16n196472', '16n197735', '16n203049', '16n215168', '16n218032',
            '16n219174', '16n220556', '16n227624', '16n230857', '16n233335', '16n239267', '16n239379', '16n242042',
            '16n242545', '16n249927', '16n265957', '16n271606', '16n271610', '16n273164', '16n277974', '16n280482',
            '16n285128', '16n306917', '16n307635', '16n315594', '16n324571', '16n329529', '16n332372', '16n349983',
            '16n353272', '16n360174', '16n366612', '16n376208', '16n385669', '16n386732', '16n387806', '16n401152',
            '16n401963', '16n402644', '16n405088', '16n412371', '16n423420', '16n424451', '16n429723', '16n438719',
            '16n440479', '16n441595', '16n459035', '16n460502', '16n461585', '16n463225', '16n463419', '16n465019',
            '16n466470', '16n467558', '16n469510', '16n470606', '16n470717', '16n473737', '16n475444', '16n481843',
            '16n489486', '16n493489', '16n494163', '16n498542', '16n498651', '16n508893', '16n513585', '16n515663',
            '16n534392', '16n540621', '16n544661', '16n550305', '16n551107', '16n577882', '16n585135', '16n587843',
            '16n588588', '16n596192', '16n596449', '16n597513', '16n598535', '16n599034', '16n600112', '16n606009',
            '16n608181', '16n609311', '16n609798', '16n614804', '16n614907', '16n617672', '16n628265', '16n629526',
            '16n631987', '16n632225', '16n635338', '16n666646', '16n687419', '16n691300', '16n696924', '16n696992',
            '16n725574', '16n761555', '16n762559', '16n767010', '16n768788', '16n770126', '16n774829', '16n784110',
            '16n786382', '16n788898', '16n789181', '16n798964', '16n809799', '16n810368', '16n812243', '16n824554',
            '16n828723', '16n847911', '16n855704', '16n855909', '16n862009', '16n863179', '16n864017', '16n864258',
            '16n864259', '16n869439', '16n869441', '16n874997', '16n879694', '16n880152', '16n888060', '16n888954',
            '16n902353', '16n906603', '16n907441', '16n907673', '16n916183', '16n916207', '16n916242', '16n918157',
            '16n919068', '16n925408', '16n932460', '16n941562', '16n941564', '16n968742', '16n972142', '16n988939',
            '16n989795', '16n990225', '16n990270', '16n991069', '16n991085', '16n998071', '16n1000650', '16n1000651',
            '16n1001406', '16n1001474', '16n1004278', '16n1004646']


for knot in to_check:
    M1 = snappy.Manifold(knot)
    M1.dehn_fill( (1,1) )

    M2 = snappy.Manifold(knot)
    M2.dehn_fill( (-1,1) )

    if abs(M1.volume() - M2.volume()) < .001:
        print('+1/-1 surgeries for ' + knot + ' have same volume')

        M1 = snappy.Manifold(knot)
        c = M1.chern_simons()
        M1.dehn_fill( (1,1) )

        M2 = snappy.Manifold(knot)
        c = M2.chern_simons()
        M2.dehn_fill( (-1,1) )


        if abs(M1.chern_simons() - M2.chern_simons()) > .001:
            print('distinguished by chern-simons invariant')
            print
        else:
            print 'not distinguished'

    M3 = snappy.Manifold(knot)
    M3.dehn_fill( (2,1) )

    M4 = snappy.Manifold(knot)
    M4.dehn_fill( (-2,1) )

    if abs(M3.volume() - M4.volume()) < .001:
        print('+2/-2 surgeries for ' + knot + ' have same volume')

        M3 = snappy.Manifold(knot)
        c = M3.chern_simons()
        M3.dehn_fill( (2,1) )

        M4 = snappy.Manifold(knot)
        c = M4.chern_simons()
        M4.dehn_fill( (-2,1) )

        if abs(M3.chern_simons() - M4.chern_simons()) > .001:
            print('distinguished by chern-simons invariant')
            print
        else:
            print 'not distinguished'


print('done')